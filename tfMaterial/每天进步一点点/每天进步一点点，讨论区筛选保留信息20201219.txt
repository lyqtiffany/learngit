
面试过程中：
个人介绍：【简短但要突出重点】
我是谁，，几几年开始测试，都有什么项目，，负责什么内容，用到的主要的技能，项目的成果，

一般会问到的问题：
做的项目中开发、测试各多少人 还有哪些岗位介入？项目是否有上线，线上用户有多少，回答用户量级即可？测试周期？上线后线上问题情况，如何处理的？
凡是简历上写的项目都要详细的了解清楚，里面用到的技能也必须掌握很好，这样才不至于被问懵

反问：
1、岗位内容
2、团队情况
3、业务规划
面试offer选择：根据自己的情况选择即可

 
序号17 的内容是: #碎碎念# #每天进步一点点# 上一个项目基本结束了，周五开始接触了个新项目，也是安全方面的，不过只是对两个模块的实现逻辑进行了优化，接触了两个安全方面的新词，记录一下。
1.挂马
所谓的挂马，就是黑客通过各种手段，包括SQL注入，网站敏感文件扫描，服务器漏洞，网站程序0day, 等各种方法获得网站管理员账号，然后登陆网站后台，通过数据库“备份/恢复”或者上传漏洞获得一个webshell。利用获得的webshell修改网站页面的内容，向页面中加入恶意转向代码。也可以直接通过弱口令获得服务器或者网站FTP，然后直接对网站页面直接进行修改。当你访问被加入恶意代码的页面时，你就会自动的访问被转向的地址或者下载木马病毒。
以上是百度百科的解释，简单来说就是黑客把木马挂在网站上，用户访问网站时在不知情的情况下就下载了木马病毒；
2.暗链
其实“暗链”就是看不见的网站链接，“暗链”在网站中的链接做得非常隐蔽，短时间内不易被搜索引擎察觉。它和友情链接有相似之处，可以有效地提高PR值。但要注意一点PR值是对单独页面，而不是整个网站。
说明：PR值全称为PageRank，用来表现网页等级的一个标准，级别分别是0到10，是Google用于评测一个网页“重要性”的一种方法。
以上是百度百科的解释，黑客通过在网站上植入暗链，使网站在在百度搜索时排名靠前，侧面提高网站的访问量；
下面简单说说公司的实现逻辑吧。
首先在初始检测a网站时，会默认该网站内容是安全的，通过Python爬虫将此时的html内容获取下来以json格式存储作为该网站的蓝本；
若后续网站html内容发生变化，则与蓝本进行比较，若新html增加了a、meta、script、iframe、img等标签则通过系统进行告警；其中根据标签中的url是否备案、是否是国外IP的url、元素是否可见等因素判定其危险等级（高、中、低）；其中元素不可见且非script为暗链告警，其他的是挂马告警；
具体逻辑还是挺复杂的，不好直接把检测流程图贴出来；


序号26 的内容是: 说说今天在工作在学习的新东西和问题吧：
1.了解 /etc/pam.d/system-auth 文件
 主要了解了密码复杂度的设置
 在 password required 后面进行设置；
 minlen = N：密码的最小长度；
 dcredit = N：当 N>0时表示密码中数字出现的最多次数；当 N<0 时表示密码中数字出现的最少次数；
 ucredit = N：当 N>0 时表示密码中大写字母出现的最多次数；当 N<0时表示密码中大写字母出现的最少次数；
 lcredit = N：当 N>0 时表示密码中小写字母出现的最多次数，当 N<0 时表示密码中小写字母出现的最少次数；
 ocredit = N ：当 N>0 时表示密码中特殊字符出现的最多次数，当 N<0 时表示密码中特殊字符出现的最少次数；
 详情：

2.用Navicat执行命令时报错 can't create/write to file '/tmp@sql_1aaf3_0.MYI'(Errcode:13 - Permission denied)
具体如下：
  （1）.用navicat连接Mysql操作时一直提示“can't create/write to file '/tmp@sql_1aaf3_0.MYI'(Errcode:13 - Permission denied)”，但链接其他数据库能正常操作；
  （2）.登录服务器用 mysql -u root -p登录时提示
  ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock'
  在网上查了下，很多人说是没有权限，执行 chmod 777 /tmp就可以了，尝试了下没有用；
  后来发现/tmp目录下没有mysql.sock文件；
  （3）.解决方法
  全局查的文件 mysql.sock，命令：find / -name mysql.sock; 
  发现在 /var/lib/mysql/ 目录下有该文件；
  建立软链接：ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock
  再次登录时正常，navicat 也可以正常执行命令
 详情：
 
 
 
 mysql打卡一期结束了，整体学习下来还是挺有感触的，之前只停留在看得懂阶段，虽然大学学过关系数据库，但是也是缺少练习。这次的打卡整体来说意义很大，既熟练了数据库知识又利用了碎片化时间完成打卡，更充实了。二期的打卡继续努力。
下面是我的个人打卡笔记，自测有效
1、创建数据库
create database 数据库名称;
2、创建表
create table istester(
id int(10) not null unique primary key auto_increment,
name varchar(20) not null,
address varchar(50)
);
3、复制表
create table istester2 like istester；
create table idoxu2 as select * from idoxu where 2=1;
复制表中部分结构：只复制idoxu 表中id,stu_id,istester字段
create table idoxu3 as select id,stu_id,istester from idoxu where 1<>1;

4、查询表
查询idoxu表中c_name包含i的数据
1）select * from idoxu where c_name like '%i%';
查询istester表，id包含1的数据
2）select * from istester where id like '%1%';
查询isTester表，id包含1的数据，id降序排列
3）select * from istester where id like '%1%' order by id desc;
查询istester表，id包含1的数据，取id最大的三个
4）select * from istester where id like '%1%' order by id desc limit 3;
查询idoxu表，取成绩最高的用户的信息
5）select * from idoxu order by grade desc limit 1; --- 方法一
---方法2
select c_name,grade as "maxvalue" from idoxu
where grade in(select max(grade) from idoxu);

查询idoxu表，输出成绩最低用户信息
6）select * from idoxu order by grade asc limit 1; --- 方法1
---方法2
select c_name,grade as "minvalue" from idoxu
where grade in (select min(grade) from idoxu);

查询istester表，按ID降序排序
7)select * from istester order by id desc;

查询idoxu表，按grade升序
8)select * from idoxu order by grade;

查询istester表，有多少行数据
select count(sex) from istester;

查询istester表，有性别类型数量（sex字段、去重）
select count(distinct sex) from istester;

9）查找idoxu表，成绩在80~100区间的学生
select * from istester where grade>=80 and grade<=100;
select * from istester where grade between 80 and 100;
10）查找istester表，id为2，11，12的数据
select * from istester where id in(2,11,12);
11)排名前3的学生和分数
Select c_name,grade from idoxu order by grade desc limit 3;
12)排名3~6名的学生和分数
select c_name grade from idoxu order by desc limit 2,4;
13)排名6名以后的所有学生和分数
select c_name,grade from idoxu order by desc limit 5,666;

5.更新表
update istester set sex=1 where sex is null;

6、插入表
将istester的数据插入到idoxu表中
id对id，stu_id对id，c_name对uname，istester和grade默认设置为60
insert into idoxu(id,stu_id,c_name,isTester,grade)
select id,id,uname,60,60
from istester;

7、修改表
1）修改表名
alter table  旧表名 rename to 新表
2）增加一个字段
alter table istester add istester varchar(10);
3)修改istester表中的istester字段名称为isotester6
alter table istester change column istester istester6 varchar(10);
或
alter table istester change istester istester6 varchar(10);

8、多表查询
左连接
select * from idoxu6 idoxu left join istester is1 on ido.id=is1.id;

右连接
select * from idoxu6 ido right join istester is1 on ido.id=is1.id;
内连接
select * from idoxu6 ido inner join isteter is1 on ido.id=is1.id;

全连接（mysql无全连接，可以用union来实现全连接效果）
select * from idoxu6 ido left join istester is1 on ido.id=is1.id
union
select * from idoxu6 ido right join istester is1 on ido.id=is1.id;

修改表名idoxu6为idoxu
alter table idoxu6 rename to idoxu;

删除数据库istesterdb6
drop database istesterdb6;

删除表istester
drop table istester;

删除idoxu表的数据
delete from idoxu;





在牛客网看到一道题：查找最晚入职员工的所有信息。
employees（emp_no ，birth_date，first_name ，last_name ，gender ，hire_date）

我当时的思路是，选取日期的最后一个：
SELECT * FROM employees WHERE ORDER BY hire_date DESC LIMIT 1;
提交后失败；

思考为啥会失败：
最晚日期可能会同时导入多个员工，LIMIT 1就不适用了。

修改成：
SELECT * FROM employees WHERE hire_date (SELECT MAX(hire_date) FROM employees);

通过了。



1、mysql基础总结：mysql基础 - 简书
2、基于SQL打卡第3天0330作业（根据已有的表istester 和 idoxu 创建新表（复制表））的思考：
   创建表的多种方式 创建表的多种方式 - 简书
   数据库备份与恢复：数据库备份恢复 - 简书
3、基于SQL打卡第7天0403作业（数据插入id=11,uname = idoxu3,sex=1
id=12,uname = idoxu4,sex=2）的思考：怎么插入一百条此类相似数据，本来想用 SQL函数解决，感觉有点麻烦，最后用python一个循环搞定
4、基于SQL打卡第16天0412作业（造数据 ，把istester表的所有数据，插入到 idoxu表）唯一索引或主键冲突问题的学习总结：


今天在回顾mysql21天打卡内容的时候，看到更新表里某个字段值的时候，突然不知道该用update还是alter了，脑子里一下分不清两者的区别了，于是找资料学习了下，现在算是搞清楚了。分享如下：
MySQL语句中涉及到修改的命令有alter、update，但是两者之间具体有什么区别，分别使用在什么场景呢？

alter：用来修改表的数据结构（包括表名和字段名以及字段的增、删、改）
例如：
修改表名：> alter table istester rename to idoxu;
----把表名由istester改成idoxu，其中to可带可不带

修改字段名：> alter table istester change c_name u_name varchar(50);
----把字段名由c_name改成u_name，如果字段属性不变，change  源字段名  目标字段名   即可。

增加字段：> alter table idoxu6 add sex int not null default 1;
----往表idoxu6中新增一个性别字段sex，需要至少指定一个字段属性，不指定属性添加不成功

删除字段：> alter table istester drop column hobby;
----删除表istester中的hobby字段，其中column可带可不带

修改字段类型：> alter table idoxu6 modify c_name varchar(20) not null default 'my';
或者> alter table idoxu6 change c_name c_name varchar(20) not null default 'my';
----修改表idoxu6中字段c_name的属性为字符型，长度20，非空，默认值是my
----使用change的话需要写两次字段名，即：change  源字段名  源字段名

update：用来修改表中字段的值
例如：
字段name原来的值是张三，现在要改成李四：
> update idoxu set name='李四' where name='张三'；
----如果没有where条件，会把表中所有name都改成“李四”

删除字段name的值：
> update idoxu set name=null where name='张三';

另外还可能涉及到性能、查询效率等问题，这里就不深入了，先掌握基础的应用。





序号42 的内容是: #每天进步一点点# 
今天做sql打卡有一题在数据库istester6，创建表idoxu表，直接拷贝istester库idoxu6表的数据和结构，写的时候没有注意idoxu6表不在当前数据库里，导致报错
Table 'istesterdb6.idoxu6' doesn't exist
然后秒懂，因为在不同的数据库，需要标识是哪个数据库的表才可以
create table idoxu like istester.idoxu6;
insert into idoxu select * from istester.idoxu6;
总结：如果表在不同数据库里需要指明数据库.表名来定位表

 
序号43 的内容是: #每天进步一点点#
今天学习了下linux中常用的通配符，不知道大家了解多少，分享如下：
比较常用的通配符有：* 、?、[]等：
1、* 表示任意长度的任意字符
例：ls -d ./host*     # 显示当前目录下所有以host开头的文件与目录
2、? 表示任意一个字符
例：ls a?.jpg      # 显示当前目录下所有以a开头，名称只有两个字符的.jpg格式的文件
3、[] 匹配指定范围内任意一个字符
例：ls -d [ac]*    # 显示当前目录下所有以a或c开头的目录或文件，-d表示如果是目录只展开一级目录
扩展：
[a-z]：表示任意一个字母，不区分大小写，写成[a-Z]、[A-z]、[A-Z]效果都一样
例：ls *[a-Z].png      # 显示当前目录下所有以字母（不区分大小写）结尾的.png格式的文件
[0-9]：表示任意一个数字
例：ls a[0-9]b.txt     # 显示当前目录下所有名称以a开头、b结尾，中间只有一个数字的.txt格式的文件
4、[^] 匹配除了指定范围以外的任意一个字符
例：ls -d [^a]*     # 显示当前目录下所有除了以a开头的文件和目录

常用的字符集表示方法：
[:alpha:] 表示所有的字母（不区分大小写），效果同[a-z]
例：ls -d [[:alpha:]]     效果同    ls -d [a-Z]   # 显示当前目录下所有单个字母的目录和文件
[:digit:] 表示任意单个数字，效果同[0-9]
例：ls -d *[[:digit:]]   效果同  ls -d *[0-9]    # 显示当前目录下所有以数字结尾的目录和文件
[:lower:] 表示任意单个小写字母
例：ls [[:lower:]].ini    # 显示当前目录下所有以单个小写字母为名的.ini格式的文件
[:upper:] 表示任意单个大写字母
例：ls [[:upper:]].ini     # 显示当前目录下所有以单个大写字母为名的.ini格式的文件
[:alnum:] 表示任意单个字母或数字
例：ls -d [[:alnum:]]    # 显示当前目录下所有单个字母（不区分大小写）或数字为名的目录或文件
详情可见简书文章：

linux中通配符的使用场景还可以延伸到用find命令查找匹配的目录或文件，查找日志中匹配的关键字等。

通配符在SQL语句中，正则表达式中都有广泛的应用，大家可扩充。





  
序号49 的内容是: #每天进步一点点# 
这个礼拜坚持每天都打卡，每天下班回家吃完饭后，大概一个小时的时间坐点电脑前，把很多之前看过的命令和sql语句真正的一点一点的实现，这个安静的时间，属于自己的思考时间，一点点的进步，这样的感觉很好。
这次版本在灰度遇到的3个问题:
1.部分机型产生crash 
2.新商户号在正式环境支付失败，用户量较大，影响较大
放到线上出问题有2点:
一、正式环境和预发布环境配置的商户号不一致，预发布环境的旧商户号支付功能正常，整个场测的过程中都没发现问题，灰度发布时正式环境配置的是新商户号，新商户号支付功能未开通，功能不完善，造成用户所有的支付订单都是失败的，由于商户号的配置是产品经理配置的，测试无法知道商户号是否是一致的，改进方案:多与产品经理沟通，确认注意事项
二、由于是海外的版本，依赖海外本地的资源，正式环境发布后，测试未能在正式环境进行支付验证，后续改进方案是:新上架渠道或者商户号，正式环境配置了请求场测再次进行验证
3.软件商店放量时间过长到导致二轮灰度数据仍旧有crash
此次灰度发布策略走的是软件商店，在第一轮发布后的第二天，软件商店的发布人员将我们的apk上架了一整天，以至于之前未修复的crash版本被很多用户升级，在我们不清楚软件商店上架一整天的情况下，发布了第二轮灰度，跟踪数据发现crash数据仍旧未下降，经过排查后才发现第一发布后的第二天被上架了一整天。虽然是误操作，这个过程中我们对于发布后的数据关注不够，加上又遇上假期，后续对于版本发布后，应该要密切关注发布后的数据，实时监控



序号51 的内容是: #每天进步一点点#
今天上线的活动出现问题，经排查是老版本的数据和新版本兼容存在问题，原本老版本部分数据需要去掉，新版本上线之后，因为数据一直在跑，所以没有做处理。
处理方式：API同事紧急处理删除不符合的老数据
总结：
1、QA考虑不够，应考虑老版本数据和新版本数据的兼容问题
2、对于活动多考虑机型适配（android5.0~10.0），统计出问题多机型重点关注
3、开发和QA应列出checklist，方便回归
4、对于高峰期应提前验收，如果有问题及时提出方便修改。



第二天打卡的第4题: 进入当前用户主目录
我和很多同学都回答: cd /
实际答案: cd ～

为什么呢？
这里涉及两个概念，一个是根目录，一个是当前用户主目录
它们的区别主要表现:
1、目录层次不同：
/：根目录，所有的目录、文件、设备都在/之下，/就是Linux文件系统的组织者，是最上级的目录。
用户主目录：如果建立一个用户，用户名是"root"或者“userTest”，那么在/home目录下就有一个对应的/home/root或者/home/userTest路径，用来存放用户的主目录，回到题目“用户主目录”，就是我们用来登录Linux的用户，比如我用的是root用户，那么用户主目录就是/home/root，而不是/home/userTest。
2、目录产生的时间不同：
/根目录作为文件系统的必备，一开始就需要在系统运行时建立；
而/home目录只有建立新用户的时候才产生。



需求管理跟测试有什么关系？
什么是测试？好的测试，是把产品问题扼杀在需求上，耗费的成本远远小于项目走到需求之后流程产生的成本。是否如此？

有没有遇到过一个版本就在一个需求单上，后面评论区跟着长长一段各路大神讨论需求的留言，需求改动后的样子到底如何，还需要使劲在评论区内找其真身？

有没有遇到需求A在开发过程中，变成了需求A+A.1+A.2……，发布后，过了一段时间回来或者换个人来跟，看到的还是需求A，A.1+A.2不知何处可寻？

有没有遇到需求是测试W负责，跟进期间需求B改动不少成了B.1，同期测试Y负责的功能C和B有关，B的一个小改动直接影响C，然测试Y并不知道有B.1的改动，等到测试遇到了问题，咨询后才知道？

作为新人，或者工作中难免要去负责一个迭代了好几个版本的功能。面对需求输出出口不统一的情况也曾混乱和痛不欲生过:跟进一个迭代了好几个版本的需求A，去找去看不同的文件，还要找不同的人问改动详情……期间沟通，搜索很费时间和心力，还要被产品反问:不是跟你们测试谁谁说过了吗（太囧╯□╰）。

什么是好的需求管理呢？
我希望需求管理有以下几点：
1、每个产品对应一个总的需求文档，无论产品经历多少个迭代，看到这个需求文档就能大致熟悉产品现在的情况；
2、哪个版本对应哪些需求，能一目了然；
3、每个需求变更都得到很好的控制，即使小需求小改动，也请好好深思熟虑后，经过审核再纳入版本中并备注修改缘由；
4、每个需求变更，在哪个版本上开发，大概的开发时间，开发完成时间，提测时间；
5、一个大版本拆分多个子需求跟踪，各个子需求能指派给不同的开发，不同的测试跟踪，针对子需求的改动都能从上面了解到；
6、需求变更了，一定知会到相关人员，消息出现断层，就可能会影响项目进度了；
7、需求开发完成，测试验证通过，才算一个需求完成的周期；
8、最后，每个版本迭代后，及时更新总的需求文档，备份在案。



序号59 的内容是: #每天进步一点点# 记一次灰度发布crash
新版本4.1日晚上进行第一轮灰度发布，4.2日发现有2个crash的问题，具体表现是:部分机型使用主题商店会产生crash，具体数据是:非印度+印度的大概有近900人次，其中印度有678人次
核查出这个问题的具体原因是依赖的第三方接口修改了，但是提供给我们业务方的接口文档并没有修改，开发确认过文档是不是最新的，但是并不知道文档的内容并不是最新的，由于这个需求是技术需要，没进行需求评审，测试不知道具体的改动点及影响点，所以测试过程中没发现这个cras。
开发在修复完这个问题后追责，首先质疑的是为什么负责测试的伙伴没有测出来，测试伙伴给出的回答是用的3.27的构建版本进行测试，是没有这个问题的，而且机型也不可能全部覆盖。
今日思考的问题是:对于依赖的第三方修改接口或者其他东西有修改但是作为依赖方却不知情造成的现象，应当如何才能有效的规避？

 
序号60 的内容是: #每天进步一点点# 
今天优化了部分场测用例，设计思路一句昨天总结的优化方案，场测用例是给境外伙伴使用当地网络和本地资源模拟线上环境进行的测试，用的是全英文版本，由于境外伙伴任务较多，加上这次跟进这个版本发现他们在识别问题及执行效率都比较低，所以需要进行优化，今天只完成了两个国家，优化后用例少了2/3，明天接着整理。
今天发生了一件让我很无奈的事，起因是因为我们业务新增了1个接口，需要安全团队评估是否需要进行测试，所以就拉了一个沟通群进行评估，安全团队看了接口文档之后觉得需要进行测试，测试后提出了两个问题，一是域名没有使用https，二是加密方法不符合公司规定。本来很正常的事，安全团队测试完之后有问题提交问题，我们这边进行处理，问题需要改修改完成后再次提交测试，不进行修改的问题给出理由，得到相关负责人的同意并告知安全团队，但是由于开发对接人的态度非常不配合，加上言语间带着些讽刺意味，安全团队的负责人便要求与开发负责人直接对接，但是今天开发负责人还在返回公司的路上，我见事态发展得有点恶劣，便让项目PM参与进来决策一下，PM了解情况后拉了相关人员进行会议，我以为问题得到解决了，下班前又看到开发对接人在群里发了两句有点攻击性的话语，安全团队的负责人对于那些话语也是非常无奈。
工作本来就是团队协作，如果沟通时带着情绪，久而久之大家都不会愿意跟你合作，长久以来我都在要求自己好好跟开发沟通，工作中难免遇到这种同事，所以我在想，作为管理者遇到这种情况应该如何处理才算妥善？

 
 
 序号70 的内容是: 问：百人计划开启后的第一天我干了什么？
答：在阿里云服务器上部署禅道环境：
步骤1，购买一个阿里云服务器，，买了一台最便宜的，消费69.86￥
步骤2，通过xshell远程连接控制台。
步骤3，将下载好的禅道包，通过rz的方式上传到linux服务器上（第一次用）之前很少接触linux
步骤4，将禅道压缩包解压到/opt目录
步骤5，启动mysql和Apache服务（启动成功）
步骤6，通过浏览器直接访问Apache端口（访问失败，参照老徐文章，经过检查防火墙没关闭）
步骤7，关闭防火墙，再次访问（访问失败，这次访问失败后，我去检查了mysql和Apache的状态都是正常的）
步骤8，毫不犹豫的去百度了下，找到了原因：打开云服务器ECS-安全组-配置规则-添加80端口
步骤9，再次通过浏览器直接访问Apache端口，访问成功
整个过程中参照老徐的文章还是比较顺利的，没遇到啥大问题，第一次在云服务器上部署禅道还是挺开心的，以后工作中要是遇到搭建禅道环境不用求运维了
今年目标:sql，Linux，app自动化，加强测试思维，提高动手能力。

序号83 的内容是: #每天进步一点点# 聊一下人脸识别.
1.接触供应商的时候了解到人脸识别分为2D和3D，个人理解的2d和3d就是二维和三维的区别。2d是由一颗摄像头采集的一张平面图片；3d是由两颗摄像头采集图片(猜测是有一颗摄像头采集距离)。市面上常见的人脸识别都是2d，包括支付宝的人脸支付和苹果的人脸解锁。
2.个人认为人脸支付有两个不好推广的原因：隐私，现在人民越来越注重个人隐私(尽管已经没有什么隐私)；安全，将自己的图片数据交给厂家，认为不安全。



序号85 的内容是: #每天进步一点点# 记一个修改js文件，引发的前台js报错问题，本地测不出来，客户后台却找不到页面（不知道是不是通用的）

【先介绍下背景】
我们是web产品，存在发布机、管理机、js文件，页面会引用到这些js文件。出于安全考虑，规定js文件名称和文件里面都不得带有版本号。

【现在描述bug的来龙去脉】
比如某个js文件叫jquery.2.1.1，有10个页面引用了它。这时把它的名称改掉，叫SuperSlide。按说那10个页面里面的名称也要相对应改掉，但是只改了7个页面，3个漏改了。所以讲道理，这3个漏改的页面，前台访问的话会报js404错误。但是不然，本地测试环境的前台一切正常。
而把网站包导到客户环境，再去访问，就找不到js文件了，猝。
原因是啥呢？因为js文件是静态资源，发布的时候，是“增量式发布”。即，修改js文件名称和页面里的名称之前，发布过一次，这时发布机上存的是jquery2.1.1文件---页面里面jquery2.1.1的映射关系。修改过以后，对于那3个漏掉的页面来说，再次发布，发布机里存的是Superslide文件---页面里面jquery2.1.1的映射关系。这时在前台访问的话会把所有的映射关系都遍历一边，即便在第二次的发布里找不到映射关系，在第一次的也能。总之，能找到引用的js文件，前台就不会报错。
而客户环境呢？是把本地修改后的网站包导到客户环境的，那么对客户环境进行发布之后，发布机存储的只有Superslide文件---页面里面jquery2.1.1的映射关系，当然在前台就报错了！

【如何测试呢？】
1.测试人员把本地发布机的js文件全部删除
2.本地访问，检查前台js报错情况

以上，web测试的朋友可以参考。


> 作业，
根据如上需求，编写测试点 。
写完后，生成png图片，在此星球（软件测试圈），通过主题的形式，分享出来 。


最后，
测试点，统一用脑图的形式编写 。
1）工具推荐：Xmind
2）如果电脑没有安装xmind，老徐推荐大家用在线的Processon，个人用免费版足够，可画流程图+脑图等，非常不错 


序号120 的内容是: #每天进步一点点# 
1.之前一直没有搞明白cookie和session，今天又开始学习了，之前面试的时候也被问到过
2.另外发现，用批处理结合adb命令，可以很方便的进行一系列操作，比如依次将点亮屏幕、上滑屏幕解锁、左右滑动手机桌面、打开浏览器、输入内容、返回桌面、长按home键、关闭屏幕等命令写到bat文件中，保存后执行此bat文件，就会自动实现这些命令


cp命令中有如下几点记录下：
1.复制文件不需要加选项，除非想保留文件属性，需要增加p;而复制目录是需要加r选项
2.复制的时候可以在一条命令中同时复制多个文件，且还可以在复制过程中变更文件名，这点与windows不同
mv和rm指令需要慎用，至少在使用前做好数据备份，以免误删导致系统奔溃，那可真的就是整个世界都安静了


序号130 的内容是: #每天进步一点点# 最近因为工作需要，要抓取客户端日志，所以开始接触adb。
【安装】
下载工具包，解压，配置环境变量即可使用
【使用】
直接通过DOS窗口操作命令
检查设备连接：adb devices
抓取日志：adb shell回车，再输入logcat即可，退出可用Ctrl+C
手机录屏存储到sd卡：adb shell screenrecord /sdcard/demo.mp4


序号143 的内容是: #每天进步一点点# 
Vi命令
命令       说明
i       在当前光标处进行编辑
I       在行首插入
A      在行末插入
a      在光标后插入编辑
o      在当前行后插入一个新行
O      在当前行前插入一个新行
r       替换从光标所在位置后到一个单词结尾的字符
HOME   回到行首 
END  $  行尾  
gg    文档首行
G      文档最后一行首行
dd    删除光标所在行
2dd  光标向下删2行
5x     删除5个字符
cw    光标所在处开始至行末删除
u      撤回
yy    复制  p 粘贴
查找替换 将aaa替换成bbb      :1,$s/aaa/bbb/g
:%s/aaa/bbb/g

查找   /要查找的字符   向下查找n，向上查找N
强退 :q！
强制保存退出   :wq！


今日复习linux命令cd，mkdir命令
一、切换目录命令 cd
1、使用格式：cd dirname
dirname 表示相对路径或者绝对路径，如果目录省略则表示回到用户的home目录(也就是login时所在的目录)
    "~" 也表示为home目录的意思
    "." 则是表示目前所在的目录
    ".."表示当前所在目录的上一级目录
2、进入abc目录，使用相对路径：cd test/abc/
3、进入abc目录，使用绝对路径：cd /root/test/abc/
4、回到当前所在目录上一级目录
    cd ../
5、回到用户主目录（就是login时所在的目录，我是使用root用户登陆，所以是回到root目录）
    cd
    cd ~

二、mkdir命令
1、用于创建目录或者多级目录
使用格式：mkdir [选项] 目录名称
               -p  创建多级目录，目录存在时不会给出目录存在的提示信息，而是若目录已经存在，则不创建；若是不存在，则创建新目录
               -v  显示创建目录过程信息
2、创建一个abc目录，不加-p参数，若是目录存在，则无法创建，且提示目录已经存在
        mkdir abc  
3、创建一个test目录，使用 -v 参数，显示目录创建过程信息
        mkdir -v test
4、创建多个目录，使用{}将多个目录括起来，且每个目录之间通过英文逗号隔开(,)，彼此之间不能有空格
        mkdir {one,two,three}
5、创建多级目录，使用 -p 参数
        mkdir -p test/see-easybuy/log


序号156 的内容是: #每天进步一点点# 
UI自动化测试
1、select标签选中value的三种方法使用Select类的
Select(s).select_by_index()-索引
Select(s).select_by_value()-value值
Select(s).select_by_visiable_text()-显示文本

2、alert弹窗
1）切换到alert弹窗
a = driver.switch_to_alert()
2)打印弹窗内容
print(a.text)
3)
确认：driver.switch_to_alert().accept()
取消：driver.switch_to_alert().dismiss()
输入：driver.switch_to_alert().send_key()
4)有时候遇到假的alert，就要用获取窗口的方式
handles = driver.window_handles
driver.switch_to_window.(handle[1])


 1.学习less、head、tail命令
总结：
 1.more和less的比较（我个人觉得less比more好用）
   a）相同点：
     都按页的方式显示内容；
     space、enter、q、/的用法相同；
     都能向下按页翻、按行翻；
   b）不同点：
     more是在屏幕上显示内容，退出后内容还可以查看到，向上直接滑动屏幕滚动条即可；    
     less不是将内容显示在屏幕上，只能查看到一页的内容，可以通过按钮和命令上下翻页，退出后不占用屏幕空间；
     more：向下翻页翻到底部会自动退出该模式
     less：只能通过q命令退出该模式
     向下搜索字符串：more是将该页内容显示出来，less还会将搜索的字符串高亮显示
 2.意外发现：操作命令过程中发现了一个提示“You have new mail in /var/sppol/mail/root”，root是一个邮件，可以用less查看其内容。网上百度了下，这邮件内容是一些正常的系统信息或者重要的错误报告，可以不定时看看。
学习环境：
 1.在自己电脑上安装的VMare 10
 2.在WMare上装的CentOS 6.5
 
