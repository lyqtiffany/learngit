#54 取一个整数a从右端开始的4〜7位。
# 程序分析：可以这样考虑：
# (1)先使a右移4位。
# (2)设置一个低4位全为1,其余全为0的数。可用~(~0<<4)
# (3)将上面二者进行&运算。

# ~ : 逐位取反
#bin()：转换为二进制的函数，比如bin(2)返回值是字符串类型的'0b10'。

'''
<<左移
运算规则： 按二进制形式把所有的数字向左移动对应的位数，高位移出（舍弃），低位的空位补零。
语法格式：需要移位的数字<<移位的位数

例如：3<<2则是将数字3左移动2位
计算过程：3<<2首先把3转换为二进制数字00000000000000000000000000000011
然后把该数字高位（左侧）的两个零移出，其他的数字都朝左平移2位，最后在低位（右侧）
的连个空位补零。则得到的结果是00000000000000000000000000001100，
在数学没有溢出的前提下，对于正数和负数，左移n位就相当于乘以2的n次方
'''

'''
>>右移
运算规则：按二进制形式把所有的数字向右移动对应的位数，低位移出（舍弃），高位的空位补符号位
即正数补0，负数补1
语法规则：需要移位的数字>>移位的次数
例如：11>>2则是将数字11右移2位
计算过程：11的二进制形式为：00000000000000000000000000001011然后把低位的最
后两个数字移出，因为该数字是正数，所以在高位补0，则得到的最终的二进制结果为：
00000000000000000000000000000010转换为十进制数为3
数学意义：右移一位相当于除以2，右移n位相当于除以2的n次方，这里取的是商，不要余数
'''
if __name__ == '__main__':
    #a = int(input('input a number'))
    a = 9 # 8+4+1 = 0101
    b = a >> 4 #00000000000000000000000000000000
    c = ~(~0 << 4) #c = 15 =1111
    d = b & c # d = 0000 & 1111 = 0
    print('%o\t%o'%(a, d))  #%o 无符号整数 (八进制)

    print(bin(9))  # '-0b1001'
    print(bin(9 >> 4)) #0b0
    print(bin(~0 << 4)) #-0b10000
    print(bin(~(~0 << 4))) #0b1111